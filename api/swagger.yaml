---
swagger: "2.0"
info:
  description: "Flagr is a feature flagging, A/B testing and dynamic configuration\
    \ microservice. The base path for all the APIs is \"/api/v1\".\n"
  version: "1.1.4"
  title: "Flagr"
basePath: "/api/v1"
tags:
- name: "flag"
  description: "Everything about the flag"
- name: "segment"
  description: "Segment defines the audience of the flag, it's the user segmentation"
- name: "constraint"
  description: "Constraint is the unit of defining a small subset of users"
- name: "distribution"
  description: "Distribution is the percent distribution of variants within that segment"
- name: "variant"
  description: "Variants are the possible outcomes of flag evaluation"
- name: "evaluation"
  description: "Evaluation is the process of evaluating a flag given the entity context"
- name: "health"
  description: "Check if Flagr is healthy"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /flags:
    get:
      tags:
      - "flag"
      operationId: "findFlags"
      parameters:
      - name: "limit"
        in: "query"
        description: "the numbers of flags to return"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "enabled"
        in: "query"
        description: "return flags having given enabled status"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      - name: "description"
        in: "query"
        description: "return flags exactly matching given description"
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "description_like"
        in: "query"
        description: "return flags partially matching given description"
        required: false
        type: "string"
        x-exportParamName: "DescriptionLike"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "return flags matching given key"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      - name: "offset"
        in: "query"
        description: "return flags given the offset, it should usually set together\
          \ with limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "preload"
        in: "query"
        description: "return flags with preloaded segments and variants"
        required: false
        type: "boolean"
        x-exportParamName: "Preload"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "list all the flags"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/flag"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "flag"
      operationId: "createFlag"
      parameters:
      - in: "body"
        name: "body"
        description: "create a flag"
        required: true
        schema:
          $ref: "#/definitions/createFlagRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "returns the created flag"
          schema:
            $ref: "#/definitions/flag"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}:
    get:
      tags:
      - "flag"
      operationId: "getFlag"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      responses:
        "200":
          description: "returns the flag"
          schema:
            $ref: "#/definitions/flag"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "flag"
      operationId: "putFlag"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - in: "body"
        name: "body"
        description: "update a flag"
        required: true
        schema:
          $ref: "#/definitions/putFlagRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "returns the flag"
          schema:
            $ref: "#/definitions/flag"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "flag"
      operationId: "deleteFlag"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      responses:
        "200":
          description: "OK deleted"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/enabled:
    put:
      tags:
      - "flag"
      operationId: "setFlagEnabled"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - in: "body"
        name: "body"
        description: "set flag enabled state"
        required: true
        schema:
          $ref: "#/definitions/setFlagEnabledRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "returns the flag"
          schema:
            $ref: "#/definitions/flag"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/variants:
    get:
      tags:
      - "variant"
      operationId: "findVariants"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      responses:
        "200":
          description: "variant ordered by variantID"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/variant"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "variant"
      operationId: "createVariant"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - in: "body"
        name: "body"
        description: "create a variant"
        required: true
        schema:
          $ref: "#/definitions/createVariantRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "variant just created"
          schema:
            $ref: "#/definitions/variant"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/variants/{variantID}:
    put:
      tags:
      - "variant"
      operationId: "putVariant"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "variantID"
        in: "path"
        description: "numeric ID of the variant"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "VariantID"
      - in: "body"
        name: "body"
        description: "update a variant"
        required: true
        schema:
          $ref: "#/definitions/putVariantRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "variant just updated"
          schema:
            $ref: "#/definitions/variant"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "variant"
      operationId: "deleteVariant"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "variantID"
        in: "path"
        description: "numeric ID of the variant"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "VariantID"
      responses:
        "200":
          description: "deleted"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments:
    get:
      tags:
      - "segment"
      operationId: "findSegments"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      responses:
        "200":
          description: "segments ordered by rank of the flag"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/segment"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "segment"
      operationId: "createSegment"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - in: "body"
        name: "body"
        description: "create a segment under a flag"
        required: true
        schema:
          $ref: "#/definitions/createSegmentRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "segment created"
          schema:
            $ref: "#/definitions/segment"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments/reorder:
    put:
      tags:
      - "segment"
      operationId: "putSegmentsReorder"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - in: "body"
        name: "body"
        description: "reorder segments"
        required: true
        schema:
          $ref: "#/definitions/putSegmentReorderRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "segments reordered"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments/{segmentID}:
    put:
      tags:
      - "segment"
      operationId: "putSegment"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      - in: "body"
        name: "body"
        description: "update a segment"
        required: true
        schema:
          $ref: "#/definitions/putSegmentRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "segment updated"
          schema:
            $ref: "#/definitions/segment"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "segment"
      operationId: "deleteSegment"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      responses:
        "200":
          description: "deleted"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments/{segmentID}/constraints:
    get:
      tags:
      - "constraint"
      operationId: "findConstraints"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      responses:
        "200":
          description: "constraints under the segment"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/constraint"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - "constraint"
      operationId: "createConstraint"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      - in: "body"
        name: "body"
        description: "create a constraint"
        required: true
        schema:
          $ref: "#/definitions/createConstraintRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "the constraint created"
          schema:
            $ref: "#/definitions/constraint"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments/{segmentID}/constraints/{constraintID}:
    put:
      tags:
      - "constraint"
      operationId: "putConstraint"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      - name: "constraintID"
        in: "path"
        description: "numeric ID of the constraint"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "ConstraintID"
      - in: "body"
        name: "body"
        description: "create a constraint"
        required: true
        schema:
          $ref: "#/definitions/createConstraintRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "constraint just updated"
          schema:
            $ref: "#/definitions/constraint"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - "constraint"
      operationId: "deleteConstraint"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      - name: "constraintID"
        in: "path"
        description: "numeric ID of the constraint"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "ConstraintID"
      responses:
        "200":
          description: "deleted"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/segments/{segmentID}/distributions:
    get:
      tags:
      - "distribution"
      operationId: "findDistributions"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      responses:
        "200":
          description: "distribution under the segment"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/distribution"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
    put:
      tags:
      - "distribution"
      description: "replace the distribution with the new setting"
      operationId: "putDistributions"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      - name: "segmentID"
        in: "path"
        description: "numeric ID of the segment"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "SegmentID"
      - in: "body"
        name: "body"
        description: "array of distributions"
        required: true
        schema:
          $ref: "#/definitions/putDistributionsRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "distribution under the segment"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/distribution"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/{flagID}/snapshots:
    get:
      tags:
      - "flag"
      operationId: "getFlagSnapshots"
      parameters:
      - name: "flagID"
        in: "path"
        description: "numeric ID of the flag to get"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "FlagID"
      responses:
        "200":
          description: "returns the flag snapshots"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/flagSnapshot"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /flags/entity_types:
    get:
      tags:
      - "flag"
      operationId: "getFlagEntityTypes"
      parameters: []
      responses:
        "200":
          description: "returns all the FlagEntityTypes"
          schema:
            type: "array"
            items:
              type: "string"
              minLength: 1
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /evaluation:
    post:
      tags:
      - "evaluation"
      operationId: "postEvaluation"
      parameters:
      - in: "body"
        name: "body"
        description: "evalution context"
        required: true
        schema:
          $ref: "#/definitions/evalContext"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "evaluation result"
          schema:
            $ref: "#/definitions/evalResult"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /evaluation/batch:
    post:
      tags:
      - "evaluation"
      operationId: "postEvaluationBatch"
      parameters:
      - in: "body"
        name: "body"
        description: "evalution batch request"
        required: true
        schema:
          $ref: "#/definitions/evaluationBatchRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "evaluation batch result"
          schema:
            $ref: "#/definitions/evaluationBatchResponse"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /health:
    get:
      tags:
      - "health"
      description: "Check if Flagr is healthy"
      operationId: "getHealth"
      parameters: []
      responses:
        "200":
          description: "status of health check"
          schema:
            $ref: "#/definitions/health"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /export/sqlite:
    get:
      tags:
      - "export"
      description: "Export sqlite3 format of the db dump, which is converted from\
        \ the main database."
      operationId: "getExportSqlite"
      produces:
      - "application/octet-stream"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "file"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
  /export/eval_cache/json:
    get:
      tags:
      - "export"
      description: "Export JSON format of the eval cache dump"
      operationId: "getExportEvalCacheJSON"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        default:
          description: "generic error response"
          schema:
            $ref: "#/definitions/error"
definitions:
  flag:
    type: "object"
    required:
    - "dataRecordsEnabled"
    - "description"
    - "enabled"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: 1
      key:
        type: "string"
        description: "unique key representation of the flag"
        minLength: 1
      description:
        type: "string"
        minLength: 1
      enabled:
        type: "boolean"
      segments:
        type: "array"
        items:
          $ref: "#/definitions/segment"
      variants:
        type: "array"
        items:
          $ref: "#/definitions/variant"
      dataRecordsEnabled:
        type: "boolean"
        description: "enabled data records will get data logging in the metrics pipeline,\
          \ for example, kafka."
      entityType:
        type: "string"
        description: "it will override the entityType in the evaluation logs if it's\
          \ not empty"
      notes:
        type: "string"
        description: "flag usage details in markdown format"
      createdBy:
        type: "string"
      updatedBy:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      notes: "notes"
      updatedBy: "updatedBy"
      dataRecordsEnabled: true
      createdBy: "createdBy"
      entityType: "entityType"
      description: "description"
      id: 1
      variants:
      - attachment: "{}"
        id: 1
        key: "key"
      - attachment: "{}"
        id: 1
        key: "key"
      key: "key"
      enabled: true
      segments:
      - description: "description"
        rank: 0
        id: 1
        rolloutPercent: 93
        constraints:
        - property: "property"
          id: 1
          value: "value"
          operator: "EQ"
        - property: "property"
          id: 1
          value: "value"
          operator: "EQ"
        distributions:
        - id: 1
          variantID: 1
          variantKey: "variantKey"
          percent: 56
        - id: 1
          variantID: 1
          variantKey: "variantKey"
          percent: 56
      - description: "description"
        rank: 0
        id: 1
        rolloutPercent: 93
        constraints:
        - property: "property"
          id: 1
          value: "value"
          operator: "EQ"
        - property: "property"
          id: 1
          value: "value"
          operator: "EQ"
        distributions:
        - id: 1
          variantID: 1
          variantKey: "variantKey"
          percent: 56
        - id: 1
          variantID: 1
          variantKey: "variantKey"
          percent: 56
      updatedAt: "2000-01-23T04:56:07.000+00:00"
  createFlagRequest:
    type: "object"
    required:
    - "description"
    properties:
      description:
        type: "string"
        minLength: 1
      key:
        type: "string"
        description: "unique key representation of the flag"
  putFlagRequest:
    type: "object"
    properties:
      description:
        type: "string"
        minLength: 1
        x-nullable: true
      dataRecordsEnabled:
        type: "boolean"
        description: "enabled data records will get data logging in the metrics pipeline,\
          \ for example, kafka."
        x-nullable: true
      entityType:
        type: "string"
        description: "it will overwrite entityType into evaluation logs if it's not\
          \ empty"
        x-nullable: true
      enabled:
        type: "boolean"
        x-nullable: true
      key:
        type: "string"
        x-nullable: true
      notes:
        type: "string"
        x-nullable: true
  setFlagEnabledRequest:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "boolean"
  flagSnapshot:
    type: "object"
    required:
    - "flag"
    - "id"
    - "updatedAt"
    properties:
      id:
        type: "integer"
        format: "int64"
        minimum: 1
      updatedBy:
        type: "string"
      flag:
        $ref: "#/definitions/flag"
      updatedAt:
        type: "string"
        minLength: 1
    example:
      updatedBy: "updatedBy"
      flag:
        notes: "notes"
        updatedBy: "updatedBy"
        dataRecordsEnabled: true
        createdBy: "createdBy"
        entityType: "entityType"
        description: "description"
        id: 1
        variants:
        - attachment: "{}"
          id: 1
          key: "key"
        - attachment: "{}"
          id: 1
          key: "key"
        key: "key"
        enabled: true
        segments:
        - description: "description"
          rank: 0
          id: 1
          rolloutPercent: 93
          constraints:
          - property: "property"
            id: 1
            value: "value"
            operator: "EQ"
          - property: "property"
            id: 1
            value: "value"
            operator: "EQ"
          distributions:
          - id: 1
            variantID: 1
            variantKey: "variantKey"
            percent: 56
          - id: 1
            variantID: 1
            variantKey: "variantKey"
            percent: 56
        - description: "description"
          rank: 0
          id: 1
          rolloutPercent: 93
          constraints:
          - property: "property"
            id: 1
            value: "value"
            operator: "EQ"
          - property: "property"
            id: 1
            value: "value"
            operator: "EQ"
          distributions:
          - id: 1
            variantID: 1
            variantKey: "variantKey"
            percent: 56
          - id: 1
            variantID: 1
            variantKey: "variantKey"
            percent: 56
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      id: 1
      updatedAt: "updatedAt"
  segment:
    type: "object"
    required:
    - "description"
    - "rank"
    - "rolloutPercent"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: 1
      description:
        type: "string"
        minLength: 1
      constraints:
        type: "array"
        items:
          $ref: "#/definitions/constraint"
      distributions:
        type: "array"
        items:
          $ref: "#/definitions/distribution"
      rank:
        type: "integer"
        format: "int64"
        minimum: 0
      rolloutPercent:
        type: "integer"
        format: "int64"
        minimum: 0
        maximum: 100
    example:
      description: "description"
      rank: 0
      id: 1
      rolloutPercent: 93
      constraints:
      - property: "property"
        id: 1
        value: "value"
        operator: "EQ"
      - property: "property"
        id: 1
        value: "value"
        operator: "EQ"
      distributions:
      - id: 1
        variantID: 1
        variantKey: "variantKey"
        percent: 56
      - id: 1
        variantID: 1
        variantKey: "variantKey"
        percent: 56
  createSegmentRequest:
    type: "object"
    required:
    - "description"
    - "rolloutPercent"
    properties:
      description:
        type: "string"
        minLength: 1
      rolloutPercent:
        type: "integer"
        format: "int64"
        minimum: 0
        maximum: 100
  putSegmentRequest:
    type: "object"
    required:
    - "description"
    - "rolloutPercent"
    properties:
      description:
        type: "string"
        minLength: 1
      rolloutPercent:
        type: "integer"
        format: "int64"
        minimum: 0
        maximum: 100
  putSegmentReorderRequest:
    type: "object"
    required:
    - "segmentIDs"
    properties:
      segmentIDs:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          minimum: 1
        minItems: 1
  variant:
    type: "object"
    required:
    - "key"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: 1
      key:
        type: "string"
        minLength: 1
      attachment:
        type: "object"
        properties: {}
    example:
      attachment: "{}"
      id: 1
      key: "key"
  createVariantRequest:
    type: "object"
    required:
    - "key"
    properties:
      key:
        type: "string"
        minLength: 1
      attachment:
        type: "object"
        properties: {}
  putVariantRequest:
    type: "object"
    required:
    - "key"
    properties:
      key:
        type: "string"
        minLength: 1
      attachment:
        type: "object"
        properties: {}
  constraint:
    type: "object"
    required:
    - "operator"
    - "property"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: 1
      property:
        type: "string"
        minLength: 1
      operator:
        type: "string"
        minLength: 1
        enum:
        - "EQ"
        - "NEQ"
        - "LT"
        - "LTE"
        - "GT"
        - "GTE"
        - "EREG"
        - "NEREG"
        - "IN"
        - "NOTIN"
        - "CONTAINS"
        - "NOTCONTAINS"
      value:
        type: "string"
        minLength: 1
    example:
      property: "property"
      id: 1
      value: "value"
      operator: "EQ"
  createConstraintRequest:
    type: "object"
    required:
    - "operator"
    - "property"
    - "value"
    properties:
      property:
        type: "string"
        minLength: 1
      operator:
        type: "string"
        minLength: 1
      value:
        type: "string"
        minLength: 1
  distribution:
    type: "object"
    required:
    - "percent"
    - "variantID"
    - "variantKey"
    properties:
      id:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: 1
      percent:
        type: "integer"
        format: "int64"
        minimum: 0
        maximum: 100
      variantKey:
        type: "string"
        minLength: 1
      variantID:
        type: "integer"
        format: "int64"
        minimum: 1
    example:
      id: 1
      variantID: 1
      variantKey: "variantKey"
      percent: 56
  putDistributionsRequest:
    type: "object"
    required:
    - "distributions"
    properties:
      distributions:
        type: "array"
        items:
          $ref: "#/definitions/distribution"
  evalContext:
    type: "object"
    properties:
      entityID:
        type: "string"
        description: "entityID is used to deterministically at random to evaluate\
          \ the flag result. If it's empty, flagr will randomly generate one."
      entityType:
        type: "string"
      entityContext:
        type: "object"
        properties: {}
      enableDebug:
        type: "boolean"
      flagID:
        type: "integer"
        format: "int64"
        description: "flagID"
        minimum: 1
      flagKey:
        type: "string"
        description: "flagKey. flagID or flagKey will resolve to the same flag. Either\
          \ works."
    example:
      enableDebug: true
      entityType: "entityType"
      entityID: "entityID"
      flagID: 1
      entityContext: "{}"
      flagKey: "flagKey"
  evalResult:
    type: "object"
    properties:
      flagID:
        type: "integer"
        format: "int64"
      flagKey:
        type: "string"
      flagSnapshotID:
        type: "integer"
        format: "int64"
      segmentID:
        type: "integer"
        format: "int64"
      variantID:
        type: "integer"
        format: "int64"
      variantKey:
        type: "string"
      variantAttachment:
        type: "object"
        properties: {}
      evalContext:
        $ref: "#/definitions/evalContext"
      timestamp:
        type: "string"
      evalDebugLog:
        $ref: "#/definitions/evalDebugLog"
    example:
      evalContext:
        enableDebug: true
        entityType: "entityType"
        entityID: "entityID"
        flagID: 1
        entityContext: "{}"
        flagKey: "flagKey"
      segmentID: 1
      evalDebugLog:
        msg: "msg"
        segmentDebugLogs:
        - msg: "msg"
          segmentID: 1
        - msg: "msg"
          segmentID: 1
      flagID: 0
      variantID: 5
      variantAttachment: "{}"
      flagSnapshotID: 6
      variantKey: "variantKey"
      flagKey: "flagKey"
      timestamp: "timestamp"
  evalDebugLog:
    type: "object"
    properties:
      segmentDebugLogs:
        type: "array"
        items:
          $ref: "#/definitions/segmentDebugLog"
      msg:
        type: "string"
    example:
      msg: "msg"
      segmentDebugLogs:
      - msg: "msg"
        segmentID: 1
      - msg: "msg"
        segmentID: 1
  segmentDebugLog:
    type: "object"
    properties:
      segmentID:
        type: "integer"
        format: "int64"
        minimum: 1
      msg:
        type: "string"
    example:
      msg: "msg"
      segmentID: 1
  evaluationEntity:
    type: "object"
    properties:
      entityID:
        type: "string"
      entityType:
        type: "string"
      entityContext:
        type: "object"
        properties: {}
  evaluationBatchRequest:
    type: "object"
    required:
    - "entities"
    properties:
      entities:
        type: "array"
        items:
          $ref: "#/definitions/evaluationEntity"
        minItems: 1
      enableDebug:
        type: "boolean"
      flagIDs:
        type: "array"
        description: "flagIDs"
        items:
          type: "integer"
          format: "int64"
          minimum: 1
        minItems: 1
      flagKeys:
        type: "array"
        description: "flagKeys. Either flagIDs or flagKeys works. If pass in both,\
          \ Flagr may return duplicate results."
        items:
          type: "string"
          minLength: 1
        minItems: 1
  evaluationBatchResponse:
    type: "object"
    required:
    - "evaluationResults"
    properties:
      evaluationResults:
        type: "array"
        items:
          $ref: "#/definitions/evalResult"
    example:
      evaluationResults:
      - evalContext:
          enableDebug: true
          entityType: "entityType"
          entityID: "entityID"
          flagID: 1
          entityContext: "{}"
          flagKey: "flagKey"
        segmentID: 1
        evalDebugLog:
          msg: "msg"
          segmentDebugLogs:
          - msg: "msg"
            segmentID: 1
          - msg: "msg"
            segmentID: 1
        flagID: 0
        variantID: 5
        variantAttachment: "{}"
        flagSnapshotID: 6
        variantKey: "variantKey"
        flagKey: "flagKey"
        timestamp: "timestamp"
      - evalContext:
          enableDebug: true
          entityType: "entityType"
          entityID: "entityID"
          flagID: 1
          entityContext: "{}"
          flagKey: "flagKey"
        segmentID: 1
        evalDebugLog:
          msg: "msg"
          segmentDebugLogs:
          - msg: "msg"
            segmentID: 1
          - msg: "msg"
            segmentID: 1
        flagID: 0
        variantID: 5
        variantAttachment: "{}"
        flagSnapshotID: 6
        variantKey: "variantKey"
        flagKey: "flagKey"
        timestamp: "timestamp"
  health:
    type: "object"
    properties:
      status:
        type: "string"
    example:
      status: "status"
  error:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        minLength: 1
x-tagGroups:
- name: "Flag Management"
  tags:
  - "flag"
  - "segment"
  - "constraint"
  - "distribution"
  - "variant"
- name: "Flag Evaluation"
  tags:
  - "evaluation"
- name: "Health Check"
  tags:
  - "health"
- name: "Export"
  tags:
  - "export"
