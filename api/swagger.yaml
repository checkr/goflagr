openapi: 3.0.1
info:
  title: Flagr
  description: |
    Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is "/api/v1".
  version: 1.1.12
servers:
- url: /api/v1
tags:
- name: flag
  description: Everything about the flag
- name: segment
  description: Segment defines the audience of the flag, it's the user segmentation
- name: constraint
  description: Constraint is the unit of defining a small subset of users
- name: distribution
  description: Distribution is the percent distribution of variants within that segment
- name: variant
  description: Variants are the possible outcomes of flag evaluation
- name: evaluation
  description: Evaluation is the process of evaluating a flag given the entity context
- name: health
  description: Check if Flagr is healthy
paths:
  /flags:
    get:
      tags:
      - flag
      operationId: findFlags
      parameters:
      - name: limit
        in: query
        description: the numbers of flags to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enabled
        in: query
        description: return flags having given enabled status
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: description
        in: query
        description: return flags exactly matching given description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tags
        in: query
        description: return flags with the given tags (comma separated)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: description_like
        in: query
        description: return flags partially matching given description
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: key
        in: query
        description: return flags matching given key
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: offset
        in: query
        description: return flags given the offset, it should usually set together
          with limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: preload
        in: query
        description: return flags with preloaded segments and variants
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: deleted
        in: query
        description: return all deleted flags
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: list all the flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./flags.yaml#/definitions/flag
                x-content-type: application/json
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: ./flags.yaml#/definitions/error
    post:
      tags:
      - flag
      operationId: createFlag
      requestBody:
        description: create a flag
        content:
          application/json:
            schema:
              $ref: ./flags.yaml#/definitions/createFlagRequest
        required: true
      responses:
        "200":
          description: returns the created flag
          content:
            application/json:
              schema:
                $ref: ./flags.yaml#/definitions/flag
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: ./flags.yaml#/definitions/error
      x-codegen-request-body-name: body
  /flags/{flagID}:
    $ref: ./flag.yaml
  /flags/{flagID}/restore:
    $ref: ./flag_restore.yaml
  /flags/{flagID}/enabled:
    $ref: ./flag_enabled.yaml
  /flags/{flagID}/tags:
    $ref: ./flag_tags.yaml
  /flags/{flagID}/tags/{tagID}:
    $ref: ./flag_tag.yaml
  /flags/{flagID}/variants:
    $ref: ./flag_variants.yaml
  /flags/{flagID}/variants/{variantID}:
    $ref: ./flag_variant.yaml
  /flags/{flagID}/segments:
    $ref: ./flag_segments.yaml
  /flags/{flagID}/segments/reorder:
    $ref: ./flag_segments_reorder.yaml
  /flags/{flagID}/segments/{segmentID}:
    $ref: ./flag_segment.yaml
  /flags/{flagID}/segments/{segmentID}/constraints:
    $ref: ./flag_segment_constraints.yaml
  /flags/{flagID}/segments/{segmentID}/constraints/{constraintID}:
    $ref: ./flag_segment_constraint.yaml
  /flags/{flagID}/segments/{segmentID}/distributions:
    $ref: ./flag_segment_distributions.yaml
  /flags/{flagID}/snapshots:
    $ref: ./flag_snapshots.yaml
  /flags/entity_types:
    $ref: ./flag_entity_types.yaml
  /tags:
    $ref: ./tags.yaml
  /evaluation:
    $ref: ./evaluation.yaml
  /evaluation/batch:
    $ref: ./evaluation_batch.yaml
  /health:
    $ref: ./health.yaml
  /export/sqlite:
    $ref: ./export_sqlite.yaml
  /export/eval_cache/json:
    $ref: ./export_eval_cache_json.yaml
components:
  schemas:
    flag:
      required:
      - dataRecordsEnabled
      - description
      - enabled
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        key:
          minLength: 1
          type: string
          description: unique key representation of the flag
        description:
          minLength: 1
          type: string
        enabled:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
        segments:
          type: array
          items:
            $ref: '#/components/schemas/segment'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/variant'
        dataRecordsEnabled:
          type: boolean
          description: enabled data records will get data logging in the metrics pipeline,
            for example, kafka.
        entityType:
          type: string
          description: it will override the entityType in the evaluation logs if it's
            not empty
        notes:
          type: string
          description: flag usage details in markdown format
        createdBy:
          type: string
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
    createFlagRequest:
      required:
      - description
      type: object
      properties:
        description:
          minLength: 1
          type: string
        key:
          type: string
          description: unique key representation of the flag
        template:
          type: string
          description: template for flag creation
    putFlagRequest:
      type: object
      properties:
        description:
          minLength: 1
          type: string
          nullable: true
        dataRecordsEnabled:
          type: boolean
          description: enabled data records will get data logging in the metrics pipeline,
            for example, kafka.
          nullable: true
        entityType:
          type: string
          description: it will overwrite entityType into evaluation logs if it's not
            empty
          nullable: true
        enabled:
          type: boolean
          nullable: true
        key:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
    setFlagEnabledRequest:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
    flagSnapshot:
      required:
      - flag
      - id
      - updatedAt
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
        updatedBy:
          type: string
        flag:
          $ref: '#/components/schemas/flag'
        updatedAt:
          minLength: 1
          type: string
    tag:
      required:
      - value
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        value:
          minLength: 1
          type: string
    createTagRequest:
      required:
      - value
      type: object
      properties:
        value:
          minLength: 1
          type: string
    segment:
      required:
      - description
      - rank
      - rolloutPercent
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        description:
          minLength: 1
          type: string
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/constraint'
        distributions:
          type: array
          items:
            $ref: '#/components/schemas/distribution'
        rank:
          minimum: 0
          type: integer
          format: int64
        rolloutPercent:
          maximum: 100.0
          minimum: 0
          type: integer
          format: int64
    createSegmentRequest:
      required:
      - description
      - rolloutPercent
      type: object
      properties:
        description:
          minLength: 1
          type: string
        rolloutPercent:
          maximum: 100.0
          minimum: 0
          type: integer
          format: int64
    putSegmentRequest:
      required:
      - description
      - rolloutPercent
      type: object
      properties:
        description:
          minLength: 1
          type: string
        rolloutPercent:
          maximum: 100.0
          minimum: 0
          type: integer
          format: int64
    putSegmentReorderRequest:
      required:
      - segmentIDs
      type: object
      properties:
        segmentIDs:
          minItems: 1
          type: array
          items:
            minimum: 1
            type: integer
            format: int64
    variant:
      required:
      - key
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        key:
          minLength: 1
          type: string
        attachment:
          type: object
          properties: {}
    createVariantRequest:
      required:
      - key
      type: object
      properties:
        key:
          minLength: 1
          type: string
        attachment:
          type: object
          properties: {}
    putVariantRequest:
      required:
      - key
      type: object
      properties:
        key:
          minLength: 1
          type: string
        attachment:
          type: object
          properties: {}
    constraint:
      required:
      - operator
      - property
      - value
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        property:
          minLength: 1
          type: string
        operator:
          minLength: 1
          type: string
          enum:
          - EQ
          - NEQ
          - LT
          - LTE
          - GT
          - GTE
          - EREG
          - NEREG
          - IN
          - NOTIN
          - CONTAINS
          - NOTCONTAINS
        value:
          minLength: 1
          type: string
    createConstraintRequest:
      required:
      - operator
      - property
      - value
      type: object
      properties:
        property:
          minLength: 1
          type: string
        operator:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
    distribution:
      required:
      - percent
      - variantID
      - variantKey
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
          readOnly: true
        percent:
          maximum: 100.0
          minimum: 0
          type: integer
          format: int64
        variantKey:
          minLength: 1
          type: string
        variantID:
          minimum: 1
          type: integer
          format: int64
    putDistributionsRequest:
      required:
      - distributions
      type: object
      properties:
        distributions:
          type: array
          items:
            $ref: '#/components/schemas/distribution'
    evalContext:
      type: object
      properties:
        entityID:
          type: string
          description: entityID is used to deterministically at random to evaluate
            the flag result. If it's empty, flagr will randomly generate one.
        entityType:
          type: string
        entityContext:
          type: object
          properties: {}
        enableDebug:
          type: boolean
        flagID:
          minimum: 1
          type: integer
          description: flagID
          format: int64
        flagKey:
          type: string
          description: flagKey. flagID or flagKey will resolve to the same flag. Either
            works.
        flagTags:
          type: array
          description: flagTags. flagTags looks up flags by tag. Either works.
          items:
            type: string
          x-omitempty: true
        flagTagsOperator:
          type: string
          description: determine how flagTags is used to filter flags to be evaluated.
            OR extends the evaluation to those which contains at least one of the
            provided flagTags or AND limit the evaluation to those which contains
            all the flagTags.
          default: ANY
          enum:
          - ANY
          - ALL
    evalResult:
      type: object
      properties:
        flagID:
          type: integer
          format: int64
        flagKey:
          type: string
        flagSnapshotID:
          type: integer
          format: int64
        segmentID:
          type: integer
          format: int64
        variantID:
          type: integer
          format: int64
        variantKey:
          type: string
        variantAttachment:
          type: object
          properties: {}
        evalContext:
          $ref: '#/components/schemas/evalContext'
        timestamp:
          type: string
        evalDebugLog:
          $ref: '#/components/schemas/evalDebugLog'
    evalDebugLog:
      type: object
      properties:
        segmentDebugLogs:
          type: array
          items:
            $ref: '#/components/schemas/segmentDebugLog'
        msg:
          type: string
    segmentDebugLog:
      type: object
      properties:
        segmentID:
          minimum: 1
          type: integer
          format: int64
        msg:
          type: string
    evaluationEntity:
      type: object
      properties:
        entityID:
          type: string
        entityType:
          type: string
        entityContext:
          type: object
          properties: {}
    evaluationBatchRequest:
      required:
      - entities
      type: object
      properties:
        entities:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/evaluationEntity'
        enableDebug:
          type: boolean
        flagIDs:
          minItems: 1
          type: array
          description: flagIDs
          items:
            minimum: 1
            type: integer
            format: int64
        flagKeys:
          minItems: 1
          type: array
          description: flagKeys. Either flagIDs, flagKeys or flagTags works. If pass
            in multiples, Flagr may return duplicate results.
          items:
            minLength: 1
            type: string
        flagTags:
          minItems: 1
          type: array
          description: flagTags. Either flagIDs, flagKeys or flagTags works. If pass
            in multiples, Flagr may return duplicate results.
          items:
            minLength: 1
            type: string
        flagTagsOperator:
          type: string
          description: determine how flagTags is used to filter flags to be evaluated.
            OR extends the evaluation to those which contains at least one of the
            provided flagTags or AND limit the evaluation to those which contains
            all the flagTags.
          default: ANY
          enum:
          - ANY
          - ALL
    evaluationBatchResponse:
      required:
      - evaluationResults
      type: object
      properties:
        evaluationResults:
          type: array
          items:
            $ref: '#/components/schemas/evalResult'
    health:
      type: object
      properties:
        status:
          type: string
    error:
      required:
      - message
      type: object
      properties:
        message:
          minLength: 1
          type: string
x-tagGroups:
- name: Flag Management
  tags:
  - flag
  - segment
  - constraint
  - distribution
  - variant
  - tag
- name: Flag Evaluation
  tags:
  - evaluation
- name: Health Check
  tags:
  - health
- name: Export
  tags:
  - export
x-original-swagger-version: "2.0"
